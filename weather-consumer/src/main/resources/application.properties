# Use Apache Kafka native
quarkus.kafka.devservices.provider=kafka-native
quarkus.kafka.devservices.topic-partitions.weather-json=10
quarkus.kafka.devservices.topic-partitions.weather-avro=10
quarkus.kafka.devservices.topic-partitions.weather-proto=10

# Dev profile (%dev)

# Prod profile (%prod)
%prod.mp.messaging.connector.smallrye-kafka.bootstrap.servers=broker:29092
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=http://schema-registry:8080/apis/registry/v2

# Auto detection of Kafka serializers and deserializers
quarkus.messaging.kafka.serializer-autodetection.enabled=true

# Avro Schema Channels
mp.messaging.incoming.in-weather-avro.topic=weather-avro
mp.messaging.incoming.in-weather-avro.connector=smallrye-kafka
mp.messaging.incoming.in-weather-avro.group.id=quarkus-weather-avro-consumer-group
mp.messaging.incoming.in-weather-avro.value.deserializer=io.apicurio.registry.serde.avro.AvroKafkaDeserializer
mp.messaging.incoming.in-weather-avro.apicurio.registry.use-specific-avro-reader=true
%prod.mp.messaging.incoming.in-weather-avro.apicurio.registry.artifact.group-id=weather
%prod.mp.messaging.incoming.in-weather-avro.apicurio.registry.artifact.artifact-id=weather-avro-schema
%prod.mp.messaging.incoming.in-weather-avro.apicurio.registry.artifact.version=alpha