# Use Apache Kafka native
quarkus.kafka.devservices.provider=kafka-native
quarkus.kafka.devservices.topic-partitions.weather-avro=10

# OpenTelemetry configuration
quarkus.otel.metrics.enabled=true
quarkus.otel.logs.enabled=true
quarkus.otel.exporter.otlp.endpoint=http://localhost:4317
%prod.quarkus.otel.exporter.otlp.endpoint=http://otel-collector:4317

%dev.quarkus.otel.metrics.exporter=logging
%dev.quarkus.otel.metric.export.interval=10000ms
%dev.quarkus.otel.traces.exporter=logging

# Dev profile (%dev)

# Prod profile (%prod)
%prod.mp.messaging.connector.smallrye-kafka.bootstrap.servers=broker:29092
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=http://schema-registry:8080/apis/registry/v2

# Auto detection of Kafka serializers and deserializers
quarkus.messaging.kafka.serializer-autodetection.enabled=true

# Avro Schema Channel
mp.messaging.outgoing.out-weather-avro.connector=smallrye-kafka
mp.messaging.outgoing.out-weather-avro.topic=weather-avro
mp.messaging.outgoing.out-weather-avro.apicurio.registry.auto-register=true
mp.messaging.outgoing.out-weather-avro.value.serializer=io.apicurio.registry.serde.avro.AvroKafkaSerializer
%prod.mp.messaging.outgoing.out-weather-avro.apicurio.registry.auto-register=false
%prod.mp.messaging.outgoing.out-weather-avro.apicurio.registry.artifact.group-id=weather
%prod.mp.messaging.outgoing.out-weather-avro.apicurio.registry.artifact.artifact-id=weather-avro-schema
%prod.mp.messaging.outgoing.out-weather-avro.apicurio.registry.artifact.version=alpha

#quarkus.log.category."io.apicurio".level=TRACE
#quarkus.log.category."io.apicurio".min-level=TRACE